[greet]
command = echo Hello, $1! Welcome to $2.
help = Greet a person and mention a place
args = name place

[focus_mode]
command = python -c "import ctypes; result = ctypes.windll.user32.SystemParametersInfoW(97, 0, None, 0) if '$1' == 'on' else ctypes.windll.user32.SystemParametersInfoW(97, 1, None, 0); print('Focus mode ' + ('enabled' if '$1' == 'on' else 'disabled'))"
help = Toggle Windows 11 focus mode on or off
args = on_off

[virtual_desktop]
command = powershell -command "$desktop = New-Object -ComObject Shell.Application; $desktop.Windows().Item().Document.Folder.Self.Name; $desktop.Windows().Item().Document.Folder.MoveHere('$1')"
help = Move a file to a new virtual desktop
args = file_path

[widget_info]
command = powershell -command "Get-AppxPackage *WindowsWidgets* | Select-Object Name, Version, InstallLocation"
help = Display information about Windows 11 widgets

[snap_layout]
command = python -c "import ctypes; result = ctypes.windll.user32.SystemParametersInfoW(0x2003, 0, '$1', 0); print('Snap layout set to ' + ('three-column' if '$1' == '2' else 'four-column' if '$1' == '3' else 'default'))"
help = Change Windows 11 snap layout (1: default, 2: three-column, 3: four-column)
args = layout_option

[dark_mode]
command = python -c "import winreg; key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 'Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize', 0, winreg.KEY_ALL_ACCESS); winreg.SetValueEx(key, 'AppsUseLightTheme', 0, winreg.REG_DWORD, 0 if '$1' == 'on' else 1); winreg.SetValueEx(key, 'SystemUsesLightTheme', 0, winreg.REG_DWORD, 0 if '$1' == 'on' else 1); result = 'Dark mode ' + ('enabled' if '$1' == 'on' else 'disabled')"
help = Toggle Windows 11 dark mode on or off
args = on_off

[quick_settings]
command = powershell -command "Start-Process 'ms-actioncenter:'"
help = Open Windows 11 Quick Settings panel

[voice_typing]
command = python -c "import ctypes; ctypes.windll.user32.keybd_event(0x5B, 0, 0, 0); ctypes.windll.user32.keybd_event(0x48, 0, 0, 0); ctypes.windll.user32.keybd_event(0x48, 0, 2, 0); ctypes.windll.user32.keybd_event(0x5B, 0, 2, 0); result = 'Voice typing activated'"
help = Activate Windows 11 voice typing (Win+H)

[battery_report]
command = powershell -command "powercfg /batteryreport /output '$1\\battery_report.html'; Start-Process '$1\\battery_report.html'"
help = Generate and open a detailed battery report
args = output_directory

[startup_apps]
command = powershell -command "Get-CimInstance Win32_StartupCommand | Select-Object Name, Command, Location, User | Format-Table -AutoSize | Out-String -Width 4096"
help = List all startup applications

[cleanup]
command = powershell -command "Start-Process -FilePath cleanmgr.exe -ArgumentList '/sagerun:1' -Verb RunAs"
help = Run disk cleanup with system file cleanup

[windows_update]
command = powershell -command "Install-Module PSWindowsUpdate -Force; Get-WindowsUpdate; result = 'Check the PowerShell window for update information'"
help = Check for and list available Windows updates

[pomodoro]
command = python -c "import time, winsound; print('Pomodoro timer started. (25 min)'); time.sleep(1500); winsound.Beep(1000, 1000); result = 'Time for a break!'"
help = Start a 25-minute Pomodoro timer

[screen_sketch]
command = powershell -command "Start-Process ms-screensketch:"
help = Open Windows Snipping Tool for quick screenshots and annotations

[clipboard_history]
command = python -c "import ctypes; ctypes.windll.user32.keybd_event(0x5B, 0, 0, 0); ctypes.windll.user32.keybd_event(0x56, 0, 0, 0); ctypes.windll.user32.keybd_event(0x56, 0, 2, 0); ctypes.windll.user32.keybd_event(0x5B, 0, 2, 0); result = 'Clipboard history opened'"
help = Open Windows clipboard history (Win+V)

[quick_note]
command = python -c """import datetime, os; note_dir = os.path.expanduser('~\\Documents\\QuickNotes'); os.makedirs(note_dir, exist_ok=True); note_path = os.path.join(note_dir, f'note_{datetime.datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'); with open(note_path, 'w') as f: f.write('$1'); os.startfile(note_path); result = f'Note created and opened: {note_path}'"""
help = Create and open a quick note with the given content
args = note_content

[workspace_switch]
command = powershell -command "$app = New-Object -Com Shell.Application; $app.Windows() | ForEach-Object { $_.Quit() }; Start-Process '$1'"
help = Close all windows and open a specified application (e.g., for workspace switching)
args = app_path

[focus_playlist]
command = powershell -command "Start-Process 'spotify:playlist:$1'"
help = Open a Spotify focus playlist (requires Spotify desktop app)
args = playlist_id

[weather_info]
command = python -c "import requests; response = requests.get(f'http://wttr.in/{'$1'}?format=3'); result = response.text"
help = Display weather information for a specified location
args = location

[system_info]
command = powershell -command "Get-ComputerInfo | Format-List -Property WindowsProductName, WindowsVersion, WindowsBuildLabEx, OsArchitecture, OsName, OsVersion, OsBuildNumber, OsManufacturer, OsInstallDate, OsLastBootUpTime, OsLocalDateTime, OsUptime, OsPrimaryOwnerName, OsRegisteredUser, OsOrganization, OsProductID, OsProductType, OsSystemDrive, OsSystemDevice, OsSystemDirectory, OsWindowsDirectory, OsDeviceName, OsDeviceModel, OsDeviceType, OsProcessorCount, OsProcessorArchitecture, OsProcessorName, OsTotalVisibleMemorySize, OsTotalVirtualMemorySize | Out-String -Width 4096"
help = Display detailed system information



[network_profile]
command = powershell -command "$profiles = Get-NetConnectionProfile; $result = foreach ($profile in $profiles) { 'Name: ' + $profile.Name + ', InterfaceAlias: ' + $profile.InterfaceAlias + ', NetworkCategory: ' + $profile.NetworkCategory }; $result | Out-String"
help = Display detailed network connection profiles

[registry_monitor]
command = powershell -command "Start-Job -ScriptBlock { Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Registry/Operational'; ID=1,2} -MaxEvents 100 } | Wait-Job | Receive-Job | Format-Table TimeCreated, Message -AutoSize | Out-String -Width 4096"
help = Monitor and display recent registry changes

[smart_shutdown]
command = python -c "import psutil, os; [p.terminate() for p in psutil.process_iter() if p.name() not in ['explorer.exe', 'winlogon.exe', 'csrss.exe', 'services.exe']]; os.system('shutdown /s /t 60'); result = 'System will shut down in 60 seconds. Run `shutdown /a` to abort.'"
help = Gracefully terminate processes and schedule a system shutdown


[process_network]
command = powershell -command "Get-NetTCPConnection | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort, State, @{Name='ProcessName';Expression={(Get-Process -Id $_.OwningProcess).Name}} | Sort-Object ProcessName | Format-Table -AutoSize | Out-String -Width 4096"
help = Display network connections with associated processes

[memory_diagnostic]
command = powershell -command "Start-Process 'mdsched.exe'; result = 'Memory Diagnostic Tool scheduled for next reboot. Please restart your computer to run the diagnostic.'"
help = Schedule Windows Memory Diagnostic Tool for next reboot

[auto_dark_mode]
command = python -c "import winreg, datetime; current_hour = datetime.datetime.now().hour; is_night = 18 <= current_hour or current_hour < 6; key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 'Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize', 0, winreg.KEY_ALL_ACCESS); winreg.SetValueEx(key, 'AppsUseLightTheme', 0, winreg.REG_DWORD, 0 if is_night else 1); winreg.SetValueEx(key, 'SystemUsesLightTheme', 0, winreg.REG_DWORD, 0 if is_night else 1); result = f'Dark mode {"enabled" if is_night else "disabled"} based on time of day'"
help = Automatically toggle dark mode based on time of day

[cpu_governor]
command = powershell -command "$current = Get-WmiObject -Namespace 'root\\cimv2\\power' -Class Win32_PowerPlan | Where-Object { $_.IsActive -eq $true }; switch ('$1') { 'performance' { $guid = '8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c' } 'balanced' { $guid = '381b4222-f694-41f0-9685-ff5bb260df2e' } 'powersave' { $guid = 'a1841308-3541-4fab-bc81-f71556f20b4a' } }; $newPlan = Get-WmiObject -Namespace 'root\\cimv2\\power' -Class Win32_PowerPlan | Where-Object { $_.ElementName -eq $guid }; $newPlan.Activate(); result = 'Power plan changed to ' + '$1'"
help = Change CPU governor (performance, balanced, powersave)
args = mode

[chill_radio]
command = python -c "import webbrowser, random; stations = {'lofi': 'https://www.youtube.com/watch?v=jfKfPfyJRdk', 'chillsynth': 'https://www.youtube.com/watch?v=UedTcufyrHc', 'nature': 'https://www.youtube.com/watch?v=WZKW2Hq2fks', 'jazz': 'https://www.youtube.com/watch?v=Dx5qFachd3A', 'ambient': 'https://www.youtube.com/watch?v=yMfM2lMvM8Y'}; choice = '$1'.lower() if '$1' in stations else random.choice(list(stations.keys())); url = stations[choice]; webbrowser.open(url); result = f'Opening {choice} chill radio in your default web browser.'"
help = Start a chill web radio station (options: lofi, chillsynth, nature, jazz, ambient, or leave blank for random)
args = station